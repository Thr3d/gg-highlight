#!/bin/bash 
# Filename: gg
# Description: Log filtering and highlighting
# jesse.chandler@suse.com
# Supportconfig/hb_report log filter & highlighter
# Usage: gg [options] [file]
# GREP_COLOR="$COLOR" $grepsearch|$grepfilter -f </var/lib/gg-highlight/file containing patterns. e.g. '^.*.*$|$'>

##TODO remove binary chars on the fly (Nasty bits added when syslog starts sometimes).
#This is the manual way to clean those up.
#cat messages|tr -cd '\11\12\15\40-\176' > messages.new && mv -f messages.new messages
##TODO add bash completion

VERSION=1.2.2

# Coloring
RED='1;37;41'
YELLOW='01;33'
GREEN='01;32'
# Commands
grepsearch='grep -E --text --color=always --line-buffered'
grepfilter='grep --text --line-buffered -Ev'
# Lists/Arrays
redpatterns=("general-red" "ha-red" "sap-red" "caas-red" "hacib-red" "drbd-red")
yellowpatterns=("general-yellow" "ha-yellow" "sap-yellow" "supportconfig-yellow" "hacib-yellow" "drbd-yellow")
greenpatterns=("general-green" "ha-green" "hacib-green" "sap-green" "drbd-green")
filters=("filter-general" "filter-ha" "filter-caas" "filter-sap" "filter-soc")
experimental=("filter-test" "filter-disk" "filter-systemd")
products=("ha" "caas" "sap" "soc")
# Default Booleans
FILTER=false
EXPERIMENTAL=false

function usage() {
	echo "Usage: gg [OPTION]... <FILE>"
	echo "-i, --ignore, -f, --filter     (default: false) Enable filtering"
	echo "-v, --version 					Display version"
	echo "-h, --help 					Show this list"
	echo "-d, --disable ["${products[@]}"](default: none)  Exclude product patterns"
	echo "-e, --experimental	       (default: false) Enable experimental features"
}

function display_version() {
	echo "gg-highlight version $VERSION"
}

function reduce-arrays() {
        for i in "${!redpatterns[@]}"
        do
                if [[ "${redpatterns[$i]}" = "$1"* ]]
                then
                        unset "redpatterns[$i]"
                fi
        done
        for i in "${!yellowpatterns[@]}"
        do
                if [[ "${yellowpatterns[$i]}" = "$1"* ]]
                then
                        unset "yellowpatterns[$i]"
                fi
        done
        for i in "${!greenpatterns[@]}"
        do
                if [[ "${greenpatterns[$i]}" = "$1"* ]]
                then
                        unset "greenpatterns[$i]"
                fi
        done
        for i in "${!filters[@]}"
        do
                if [[ "${filters[$i]}" = *"$1" ]]
                then
                        unset "filters[$i]"
                fi
        done
}

if [ "$1" != "" ]; then
        while true; do
                case "$1" in
                        -h | --help )
                                usage
                                exit 1
                                ;;
                        -v | --version )
                                display_version
                                exit 1
                                ;;
                        -i | --ignore | -f | --filter )
                                FILTER=true
                                shift
                                ;;
                        -d | --disable )
				MATCH=false
				for product in "${products[@]}"
				do
					if [[ "$product" = "$2" ]]; then
						MATCH=true
						break
					fi
				done
				if [[ $MATCH = true ]]; then
                                	reduce-arrays $2
                                else
                                        echo "-d/--disable must have a valid product name. ["${products[@]}"]"
                                        exit 1
                                fi
                                shift 2
                                ;;
                        -e | --experimental )
                                EXPERIMENTAL=true
                                shift
                                ;;
                        -- )
                                shift
                                break
                                ;;
                        * )
                                break
                                ;;
                esac
        done
fi

# Check for arguments
if [ $# -eq 0 ]; then
    echo "No arguments provided"
    usage
    exit 1
fi

# Check if last argument is file
file_arg=$(echo "${@: -1}")
if [[ ! -e $file_arg ]]; then
	echo "$file_arg is not a file. Aborting."
	exit 1
fi

# Don't include hacib stuff unless "cib" is in the name of the file
if  ! echo "$file_arg" | grep -E "ha.txt|*cib*"; then
        reduce-arrays "hacib"
fi

function iterate-redhighlights() {
	greplist=()
	for i in "${redpatterns[@]}"
	do
		greplist+=( -f /var/lib/gg-highlight/"${i}".txt)
	done
	LANG=C LC_ALL=C GREP_COLOR="$RED" $grepsearch "${greplist[@]}"
}

function iterate-yellowhighlights() {
	greplist=()
	for i in "${yellowpatterns[@]}"
	do
		greplist+=( -f /var/lib/gg-highlight/"${i}".txt)
	done
	LANG=C LC_ALL=C GREP_COLOR="$YELLOW" $grepsearch "${greplist[@]}"
}

function iterate-greenhighlights() {
	greplist=()
	for i in "${greenpatterns[@]}"
	do
		greplist+=( -f /var/lib/gg-highlight/"${i}".txt)
	done
	LANG=C LC_ALL=C GREP_COLOR="$GREEN" $grepsearch "${greplist[@]}"
}

function iterate-filters() {
	if [[ $FILTER = true ]]; then
		greplist=()
		for i in "${filters[@]}"
		do
			greplist+=(-f /var/lib/gg-highlight/"$i".txt)
		done
		LANG=C LC_ALL=C $grepfilter "${greplist[@]}" --
	else
		cat
	fi
}

function iterate-experimental() {
	if [[ $EXPERIMENTAL = true ]]; then
		greplist=()
		for i in "${experimental[@]}"
		do
			greplist+=(-f /var/lib/gg-highlight/"$i".txt)
		done
		LANG=C LC_ALL=C $grepfilter "${greplist[@]}" --
	else
		cat
	fi
}

function allyourlogsarebelongtome() {
	iterate-filters |\
	iterate-experimental |\
	iterate-redhighlights |\
	iterate-yellowhighlights |\
	iterate-greenhighlights
}

cat "$file_arg" | allyourlogsarebelongtome | less
